{"version":3,"file":"component---src-pages-contact-js-e485270e09aac1d31357.js","mappings":"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","sources":["webpack://jotterbach.github.io/./node_modules/react-hook-form/dist/index.esm.mjs","webpack://jotterbach.github.io/./src/pages/contact.js"],"sourcesContent":["import React from 'react';\n\nvar isCheckBoxInput = (element) => element.type === 'checkbox';\n\nvar isDateObject = (value) => value instanceof Date;\n\nvar isNullOrUndefined = (value) => value == null;\n\nconst isObjectType = (value) => typeof value === 'object';\nvar isObject = (value) => !isNullOrUndefined(value) &&\n    !Array.isArray(value) &&\n    isObjectType(value) &&\n    !isDateObject(value);\n\nvar getEventValue = (event) => isObject(event) && event.target\n    ? isCheckBoxInput(event.target)\n        ? event.target.checked\n        : event.target.value\n    : event;\n\nvar getNodeParentName = (name) => name.substring(0, name.search(/\\.\\d+(\\.|$)/)) || name;\n\nvar isNameInFieldArray = (names, name) => names.has(getNodeParentName(name));\n\nvar isPlainObject = (tempObject) => {\n    const prototypeCopy = tempObject.constructor && tempObject.constructor.prototype;\n    return (isObject(prototypeCopy) && prototypeCopy.hasOwnProperty('isPrototypeOf'));\n};\n\nvar isWeb = typeof window !== 'undefined' &&\n    typeof window.HTMLElement !== 'undefined' &&\n    typeof document !== 'undefined';\n\nfunction cloneObject(data) {\n    let copy;\n    const isArray = Array.isArray(data);\n    if (data instanceof Date) {\n        copy = new Date(data);\n    }\n    else if (data instanceof Set) {\n        copy = new Set(data);\n    }\n    else if (!(isWeb && (data instanceof Blob || data instanceof FileList)) &&\n        (isArray || isObject(data))) {\n        copy = isArray ? [] : {};\n        if (!isArray && !isPlainObject(data)) {\n            copy = data;\n        }\n        else {\n            for (const key in data) {\n                if (data.hasOwnProperty(key)) {\n                    copy[key] = cloneObject(data[key]);\n                }\n            }\n        }\n    }\n    else {\n        return data;\n    }\n    return copy;\n}\n\nvar compact = (value) => Array.isArray(value) ? value.filter(Boolean) : [];\n\nvar isUndefined = (val) => val === undefined;\n\nvar get = (obj, path, defaultValue) => {\n    if (!path || !isObject(obj)) {\n        return defaultValue;\n    }\n    const result = compact(path.split(/[,[\\].]+?/)).reduce((result, key) => isNullOrUndefined(result) ? result : result[key], obj);\n    return isUndefined(result) || result === obj\n        ? isUndefined(obj[path])\n            ? defaultValue\n            : obj[path]\n        : result;\n};\n\nconst EVENTS = {\n    BLUR: 'blur',\n    FOCUS_OUT: 'focusout',\n    CHANGE: 'change',\n};\nconst VALIDATION_MODE = {\n    onBlur: 'onBlur',\n    onChange: 'onChange',\n    onSubmit: 'onSubmit',\n    onTouched: 'onTouched',\n    all: 'all',\n};\nconst INPUT_VALIDATION_RULES = {\n    max: 'max',\n    min: 'min',\n    maxLength: 'maxLength',\n    minLength: 'minLength',\n    pattern: 'pattern',\n    required: 'required',\n    validate: 'validate',\n};\n\nconst HookFormContext = React.createContext(null);\n/**\n * This custom hook allows you to access the form context. useFormContext is intended to be used in deeply nested structures, where it would become inconvenient to pass the context as a prop. To be used with {@link FormProvider}.\n *\n * @remarks\n * [API](https://react-hook-form.com/docs/useformcontext) • [Demo](https://codesandbox.io/s/react-hook-form-v7-form-context-ytudi)\n *\n * @returns return all useForm methods\n *\n * @example\n * ```tsx\n * function App() {\n *   const methods = useForm();\n *   const onSubmit = data => console.log(data);\n *\n *   return (\n *     <FormProvider {...methods} >\n *       <form onSubmit={methods.handleSubmit(onSubmit)}>\n *         <NestedInput />\n *         <input type=\"submit\" />\n *       </form>\n *     </FormProvider>\n *   );\n * }\n *\n *  function NestedInput() {\n *   const { register } = useFormContext(); // retrieve all hook methods\n *   return <input {...register(\"test\")} />;\n * }\n * ```\n */\nconst useFormContext = () => React.useContext(HookFormContext);\n/**\n * A provider component that propagates the `useForm` methods to all children components via [React Context](https://reactjs.org/docs/context.html) API. To be used with {@link useFormContext}.\n *\n * @remarks\n * [API](https://react-hook-form.com/docs/useformcontext) • [Demo](https://codesandbox.io/s/react-hook-form-v7-form-context-ytudi)\n *\n * @param props - all useFrom methods\n *\n * @example\n * ```tsx\n * function App() {\n *   const methods = useForm();\n *   const onSubmit = data => console.log(data);\n *\n *   return (\n *     <FormProvider {...methods} >\n *       <form onSubmit={methods.handleSubmit(onSubmit)}>\n *         <NestedInput />\n *         <input type=\"submit\" />\n *       </form>\n *     </FormProvider>\n *   );\n * }\n *\n *  function NestedInput() {\n *   const { register } = useFormContext(); // retrieve all hook methods\n *   return <input {...register(\"test\")} />;\n * }\n * ```\n */\nconst FormProvider = (props) => {\n    const { children, ...data } = props;\n    return (React.createElement(HookFormContext.Provider, { value: data }, children));\n};\n\nvar getProxyFormState = (formState, control, localProxyFormState, isRoot = true) => {\n    const result = {\n        defaultValues: control._defaultValues,\n    };\n    for (const key in formState) {\n        Object.defineProperty(result, key, {\n            get: () => {\n                const _key = key;\n                if (control._proxyFormState[_key] !== VALIDATION_MODE.all) {\n                    control._proxyFormState[_key] = !isRoot || VALIDATION_MODE.all;\n                }\n                localProxyFormState && (localProxyFormState[_key] = true);\n                return formState[_key];\n            },\n        });\n    }\n    return result;\n};\n\nvar isEmptyObject = (value) => isObject(value) && !Object.keys(value).length;\n\nvar shouldRenderFormState = (formStateData, _proxyFormState, updateFormState, isRoot) => {\n    updateFormState(formStateData);\n    const { name, ...formState } = formStateData;\n    return (isEmptyObject(formState) ||\n        Object.keys(formState).length >= Object.keys(_proxyFormState).length ||\n        Object.keys(formState).find((key) => _proxyFormState[key] ===\n            (!isRoot || VALIDATION_MODE.all)));\n};\n\nvar convertToArrayPayload = (value) => (Array.isArray(value) ? value : [value]);\n\nvar shouldSubscribeByName = (name, signalName, exact) => exact && signalName\n    ? name === signalName\n    : !name ||\n        !signalName ||\n        name === signalName ||\n        convertToArrayPayload(name).some((currentName) => currentName &&\n            (currentName.startsWith(signalName) ||\n                signalName.startsWith(currentName)));\n\nfunction useSubscribe(props) {\n    const _props = React.useRef(props);\n    _props.current = props;\n    React.useEffect(() => {\n        const subscription = !props.disabled &&\n            _props.current.subject &&\n            _props.current.subject.subscribe({\n                next: _props.current.next,\n            });\n        return () => {\n            subscription && subscription.unsubscribe();\n        };\n    }, [props.disabled]);\n}\n\n/**\n * This custom hook allows you to subscribe to each form state, and isolate the re-render at the custom hook level. It has its scope in terms of form state subscription, so it would not affect other useFormState and useForm. Using this hook can reduce the re-render impact on large and complex form application.\n *\n * @remarks\n * [API](https://react-hook-form.com/docs/useformstate) • [Demo](https://codesandbox.io/s/useformstate-75xly)\n *\n * @param props - include options on specify fields to subscribe. {@link UseFormStateReturn}\n *\n * @example\n * ```tsx\n * function App() {\n *   const { register, handleSubmit, control } = useForm({\n *     defaultValues: {\n *     firstName: \"firstName\"\n *   }});\n *   const { dirtyFields } = useFormState({\n *     control\n *   });\n *   const onSubmit = (data) => console.log(data);\n *\n *   return (\n *     <form onSubmit={handleSubmit(onSubmit)}>\n *       <input {...register(\"firstName\")} placeholder=\"First Name\" />\n *       {dirtyFields.firstName && <p>Field is dirty.</p>}\n *       <input type=\"submit\" />\n *     </form>\n *   );\n * }\n * ```\n */\nfunction useFormState(props) {\n    const methods = useFormContext();\n    const { control = methods.control, disabled, name, exact } = props || {};\n    const [formState, updateFormState] = React.useState(control._formState);\n    const _mounted = React.useRef(true);\n    const _localProxyFormState = React.useRef({\n        isDirty: false,\n        isLoading: false,\n        dirtyFields: false,\n        touchedFields: false,\n        isValidating: false,\n        isValid: false,\n        errors: false,\n    });\n    const _name = React.useRef(name);\n    _name.current = name;\n    useSubscribe({\n        disabled,\n        next: (value) => _mounted.current &&\n            shouldSubscribeByName(_name.current, value.name, exact) &&\n            shouldRenderFormState(value, _localProxyFormState.current, control._updateFormState) &&\n            updateFormState({\n                ...control._formState,\n                ...value,\n            }),\n        subject: control._subjects.state,\n    });\n    React.useEffect(() => {\n        _mounted.current = true;\n        _localProxyFormState.current.isValid && control._updateValid(true);\n        return () => {\n            _mounted.current = false;\n        };\n    }, [control]);\n    return getProxyFormState(formState, control, _localProxyFormState.current, false);\n}\n\nvar isString = (value) => typeof value === 'string';\n\nvar generateWatchOutput = (names, _names, formValues, isGlobal, defaultValue) => {\n    if (isString(names)) {\n        isGlobal && _names.watch.add(names);\n        return get(formValues, names, defaultValue);\n    }\n    if (Array.isArray(names)) {\n        return names.map((fieldName) => (isGlobal && _names.watch.add(fieldName), get(formValues, fieldName)));\n    }\n    isGlobal && (_names.watchAll = true);\n    return formValues;\n};\n\n/**\n * Custom hook to subscribe to field change and isolate re-rendering at the component level.\n *\n * @remarks\n *\n * [API](https://react-hook-form.com/docs/usewatch) • [Demo](https://codesandbox.io/s/react-hook-form-v7-ts-usewatch-h9i5e)\n *\n * @example\n * ```tsx\n * const { watch } = useForm();\n * const values = useWatch({\n *   name: \"fieldName\"\n *   control,\n * })\n * ```\n */\nfunction useWatch(props) {\n    const methods = useFormContext();\n    const { control = methods.control, name, defaultValue, disabled, exact, } = props || {};\n    const _name = React.useRef(name);\n    _name.current = name;\n    useSubscribe({\n        disabled,\n        subject: control._subjects.values,\n        next: (formState) => {\n            if (shouldSubscribeByName(_name.current, formState.name, exact)) {\n                updateValue(cloneObject(generateWatchOutput(_name.current, control._names, formState.values || control._formValues, false, defaultValue)));\n            }\n        },\n    });\n    const [value, updateValue] = React.useState(control._getWatch(name, defaultValue));\n    React.useEffect(() => control._removeUnmounted());\n    return value;\n}\n\nvar isKey = (value) => /^\\w*$/.test(value);\n\nvar stringToPath = (input) => compact(input.replace(/[\"|']|\\]/g, '').split(/\\.|\\[/));\n\nfunction set(object, path, value) {\n    let index = -1;\n    const tempPath = isKey(path) ? [path] : stringToPath(path);\n    const length = tempPath.length;\n    const lastIndex = length - 1;\n    while (++index < length) {\n        const key = tempPath[index];\n        let newValue = value;\n        if (index !== lastIndex) {\n            const objValue = object[key];\n            newValue =\n                isObject(objValue) || Array.isArray(objValue)\n                    ? objValue\n                    : !isNaN(+tempPath[index + 1])\n                        ? []\n                        : {};\n        }\n        object[key] = newValue;\n        object = object[key];\n    }\n    return object;\n}\n\n/**\n * Custom hook to work with controlled component, this function provide you with both form and field level state. Re-render is isolated at the hook level.\n *\n * @remarks\n * [API](https://react-hook-form.com/docs/usecontroller) • [Demo](https://codesandbox.io/s/usecontroller-0o8px)\n *\n * @param props - the path name to the form field value, and validation rules.\n *\n * @returns field properties, field and form state. {@link UseControllerReturn}\n *\n * @example\n * ```tsx\n * function Input(props) {\n *   const { field, fieldState, formState } = useController(props);\n *   return (\n *     <div>\n *       <input {...field} placeholder={props.name} />\n *       <p>{fieldState.isTouched && \"Touched\"}</p>\n *       <p>{formState.isSubmitted ? \"submitted\" : \"\"}</p>\n *     </div>\n *   );\n * }\n * ```\n */\nfunction useController(props) {\n    const methods = useFormContext();\n    const { name, control = methods.control, shouldUnregister } = props;\n    const isArrayField = isNameInFieldArray(control._names.array, name);\n    const value = useWatch({\n        control,\n        name,\n        defaultValue: get(control._formValues, name, get(control._defaultValues, name, props.defaultValue)),\n        exact: true,\n    });\n    const formState = useFormState({\n        control,\n        name,\n    });\n    const _registerProps = React.useRef(control.register(name, {\n        ...props.rules,\n        value,\n    }));\n    _registerProps.current = control.register(name, props.rules);\n    React.useEffect(() => {\n        const _shouldUnregisterField = control._options.shouldUnregister || shouldUnregister;\n        const updateMounted = (name, value) => {\n            const field = get(control._fields, name);\n            if (field) {\n                field._f.mount = value;\n            }\n        };\n        updateMounted(name, true);\n        if (_shouldUnregisterField) {\n            const value = cloneObject(get(control._options.defaultValues, name));\n            set(control._defaultValues, name, value);\n            if (isUndefined(get(control._formValues, name))) {\n                set(control._formValues, name, value);\n            }\n        }\n        return () => {\n            (isArrayField\n                ? _shouldUnregisterField && !control._state.action\n                : _shouldUnregisterField)\n                ? control.unregister(name)\n                : updateMounted(name, false);\n        };\n    }, [name, control, isArrayField, shouldUnregister]);\n    return {\n        field: {\n            name,\n            value,\n            onChange: React.useCallback((event) => _registerProps.current.onChange({\n                target: {\n                    value: getEventValue(event),\n                    name: name,\n                },\n                type: EVENTS.CHANGE,\n            }), [name]),\n            onBlur: React.useCallback(() => _registerProps.current.onBlur({\n                target: {\n                    value: get(control._formValues, name),\n                    name: name,\n                },\n                type: EVENTS.BLUR,\n            }), [name, control]),\n            ref: (elm) => {\n                const field = get(control._fields, name);\n                if (field && elm) {\n                    field._f.ref = {\n                        focus: () => elm.focus(),\n                        select: () => elm.select(),\n                        setCustomValidity: (message) => elm.setCustomValidity(message),\n                        reportValidity: () => elm.reportValidity(),\n                    };\n                }\n            },\n        },\n        formState,\n        fieldState: Object.defineProperties({}, {\n            invalid: {\n                enumerable: true,\n                get: () => !!get(formState.errors, name),\n            },\n            isDirty: {\n                enumerable: true,\n                get: () => !!get(formState.dirtyFields, name),\n            },\n            isTouched: {\n                enumerable: true,\n                get: () => !!get(formState.touchedFields, name),\n            },\n            error: {\n                enumerable: true,\n                get: () => get(formState.errors, name),\n            },\n        }),\n    };\n}\n\n/**\n * Component based on `useController` hook to work with controlled component.\n *\n * @remarks\n * [API](https://react-hook-form.com/docs/usecontroller/controller) • [Demo](https://codesandbox.io/s/react-hook-form-v6-controller-ts-jwyzw) • [Video](https://www.youtube.com/watch?v=N2UNk_UCVyA)\n *\n * @param props - the path name to the form field value, and validation rules.\n *\n * @returns provide field handler functions, field and form state.\n *\n * @example\n * ```tsx\n * function App() {\n *   const { control } = useForm<FormValues>({\n *     defaultValues: {\n *       test: \"\"\n *     }\n *   });\n *\n *   return (\n *     <form>\n *       <Controller\n *         control={control}\n *         name=\"test\"\n *         render={({ field: { onChange, onBlur, value, ref }, formState, fieldState }) => (\n *           <>\n *             <input\n *               onChange={onChange} // send value to hook form\n *               onBlur={onBlur} // notify when input is touched\n *               value={value} // return updated value\n *               ref={ref} // set ref for focus management\n *             />\n *             <p>{formState.isSubmitted ? \"submitted\" : \"\"}</p>\n *             <p>{fieldState.isTouched ? \"touched\" : \"\"}</p>\n *           </>\n *         )}\n *       />\n *     </form>\n *   );\n * }\n * ```\n */\nconst Controller = (props) => props.render(useController(props));\n\nconst POST_REQUEST = 'post';\n/**\n * Form component to manage submission.\n *\n * @param props - to setup submission detail. {@link FormProps}\n *\n * @returns form component or headless render prop.\n *\n * @example\n * ```tsx\n * function App() {\n *   const { control, formState: { errors } } = useForm();\n *\n *   return (\n *     <Form action=\"/api\" control={control}>\n *       <input {...register(\"name\")} />\n *       <p>{errors?.root?.server && 'Server error'}</p>\n *       <button>Submit</button>\n *     </Form>\n *   );\n * }\n * ```\n */\nfunction Form(props) {\n    const methods = useFormContext();\n    const [mounted, setMounted] = React.useState(false);\n    const { control = methods.control, onSubmit, children, action, method = POST_REQUEST, headers, encType, onError, render, onSuccess, validateStatus, ...rest } = props;\n    const submit = async (event) => {\n        let hasError = false;\n        let type = '';\n        await control.handleSubmit(async (data) => {\n            const formData = new FormData();\n            let formDataJson = '';\n            try {\n                formDataJson = JSON.stringify(data);\n            }\n            catch (_a) { }\n            for (const name of control._names.mount) {\n                formData.append(name, get(data, name));\n            }\n            if (onSubmit) {\n                onSubmit({\n                    data,\n                    event,\n                    method,\n                    formData,\n                    formDataJson,\n                });\n            }\n            if (action) {\n                try {\n                    const shouldStringifySubmissionData = [\n                        headers && headers['Content-Type'],\n                        encType,\n                    ].some((value) => value && value.includes('json'));\n                    const response = await fetch(action, {\n                        method,\n                        headers: {\n                            ...headers,\n                            ...(encType ? { 'Content-Type': encType } : {}),\n                        },\n                        body: shouldStringifySubmissionData ? formDataJson : formData,\n                    });\n                    if (response &&\n                        (validateStatus\n                            ? !validateStatus(response.status)\n                            : response.status < 200 || response.status >= 300)) {\n                        hasError = true;\n                        onError && onError({ response });\n                        type = String(response.status);\n                    }\n                    else {\n                        onSuccess && onSuccess({ response });\n                    }\n                }\n                catch (error) {\n                    hasError = true;\n                    onError && onError({ error });\n                }\n            }\n        })(event);\n        if (hasError && props.control) {\n            props.control._subjects.state.next({\n                isSubmitSuccessful: false,\n            });\n            props.control.setError('root.server', {\n                type,\n            });\n        }\n    };\n    React.useEffect(() => {\n        setMounted(true);\n    }, []);\n    return render ? (React.createElement(React.Fragment, null, render({\n        submit,\n    }))) : (React.createElement(\"form\", { noValidate: mounted, action: action, method: method, encType: encType, onSubmit: submit, ...rest }, children));\n}\n\nvar appendErrors = (name, validateAllFieldCriteria, errors, type, message) => validateAllFieldCriteria\n    ? {\n        ...errors[name],\n        types: {\n            ...(errors[name] && errors[name].types ? errors[name].types : {}),\n            [type]: message || true,\n        },\n    }\n    : {};\n\nconst focusFieldBy = (fields, callback, fieldsNames) => {\n    for (const key of fieldsNames || Object.keys(fields)) {\n        const field = get(fields, key);\n        if (field) {\n            const { _f, ...currentField } = field;\n            if (_f && callback(_f.name)) {\n                if (_f.ref.focus) {\n                    _f.ref.focus();\n                    break;\n                }\n                else if (_f.refs && _f.refs[0].focus) {\n                    _f.refs[0].focus();\n                    break;\n                }\n            }\n            else if (isObject(currentField)) {\n                focusFieldBy(currentField, callback);\n            }\n        }\n    }\n};\n\nvar generateId = () => {\n    const d = typeof performance === 'undefined' ? Date.now() : performance.now() * 1000;\n    return 'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'.replace(/[xy]/g, (c) => {\n        const r = (Math.random() * 16 + d) % 16 | 0;\n        return (c == 'x' ? r : (r & 0x3) | 0x8).toString(16);\n    });\n};\n\nvar getFocusFieldName = (name, index, options = {}) => options.shouldFocus || isUndefined(options.shouldFocus)\n    ? options.focusName ||\n        `${name}.${isUndefined(options.focusIndex) ? index : options.focusIndex}.`\n    : '';\n\nvar getValidationModes = (mode) => ({\n    isOnSubmit: !mode || mode === VALIDATION_MODE.onSubmit,\n    isOnBlur: mode === VALIDATION_MODE.onBlur,\n    isOnChange: mode === VALIDATION_MODE.onChange,\n    isOnAll: mode === VALIDATION_MODE.all,\n    isOnTouch: mode === VALIDATION_MODE.onTouched,\n});\n\nvar isWatched = (name, _names, isBlurEvent) => !isBlurEvent &&\n    (_names.watchAll ||\n        _names.watch.has(name) ||\n        [..._names.watch].some((watchName) => name.startsWith(watchName) &&\n            /^\\.\\w+/.test(name.slice(watchName.length))));\n\nvar updateFieldArrayRootError = (errors, error, name) => {\n    const fieldArrayErrors = compact(get(errors, name));\n    set(fieldArrayErrors, 'root', error[name]);\n    set(errors, name, fieldArrayErrors);\n    return errors;\n};\n\nvar isBoolean = (value) => typeof value === 'boolean';\n\nvar isFileInput = (element) => element.type === 'file';\n\nvar isFunction = (value) => typeof value === 'function';\n\nvar isHTMLElement = (value) => {\n    if (!isWeb) {\n        return false;\n    }\n    const owner = value ? value.ownerDocument : 0;\n    return (value instanceof\n        (owner && owner.defaultView ? owner.defaultView.HTMLElement : HTMLElement));\n};\n\nvar isMessage = (value) => isString(value);\n\nvar isRadioInput = (element) => element.type === 'radio';\n\nvar isRegex = (value) => value instanceof RegExp;\n\nconst defaultResult = {\n    value: false,\n    isValid: false,\n};\nconst validResult = { value: true, isValid: true };\nvar getCheckboxValue = (options) => {\n    if (Array.isArray(options)) {\n        if (options.length > 1) {\n            const values = options\n                .filter((option) => option && option.checked && !option.disabled)\n                .map((option) => option.value);\n            return { value: values, isValid: !!values.length };\n        }\n        return options[0].checked && !options[0].disabled\n            ? // @ts-expect-error expected to work in the browser\n                options[0].attributes && !isUndefined(options[0].attributes.value)\n                    ? isUndefined(options[0].value) || options[0].value === ''\n                        ? validResult\n                        : { value: options[0].value, isValid: true }\n                    : validResult\n            : defaultResult;\n    }\n    return defaultResult;\n};\n\nconst defaultReturn = {\n    isValid: false,\n    value: null,\n};\nvar getRadioValue = (options) => Array.isArray(options)\n    ? options.reduce((previous, option) => option && option.checked && !option.disabled\n        ? {\n            isValid: true,\n            value: option.value,\n        }\n        : previous, defaultReturn)\n    : defaultReturn;\n\nfunction getValidateError(result, ref, type = 'validate') {\n    if (isMessage(result) ||\n        (Array.isArray(result) && result.every(isMessage)) ||\n        (isBoolean(result) && !result)) {\n        return {\n            type,\n            message: isMessage(result) ? result : '',\n            ref,\n        };\n    }\n}\n\nvar getValueAndMessage = (validationData) => isObject(validationData) && !isRegex(validationData)\n    ? validationData\n    : {\n        value: validationData,\n        message: '',\n    };\n\nvar validateField = async (field, formValues, validateAllFieldCriteria, shouldUseNativeValidation, isFieldArray) => {\n    const { ref, refs, required, maxLength, minLength, min, max, pattern, validate, name, valueAsNumber, mount, disabled, } = field._f;\n    const inputValue = get(formValues, name);\n    if (!mount || disabled) {\n        return {};\n    }\n    const inputRef = refs ? refs[0] : ref;\n    const setCustomValidity = (message) => {\n        if (shouldUseNativeValidation && inputRef.reportValidity) {\n            inputRef.setCustomValidity(isBoolean(message) ? '' : message || '');\n            inputRef.reportValidity();\n        }\n    };\n    const error = {};\n    const isRadio = isRadioInput(ref);\n    const isCheckBox = isCheckBoxInput(ref);\n    const isRadioOrCheckbox = isRadio || isCheckBox;\n    const isEmpty = ((valueAsNumber || isFileInput(ref)) &&\n        isUndefined(ref.value) &&\n        isUndefined(inputValue)) ||\n        (isHTMLElement(ref) && ref.value === '') ||\n        inputValue === '' ||\n        (Array.isArray(inputValue) && !inputValue.length);\n    const appendErrorsCurry = appendErrors.bind(null, name, validateAllFieldCriteria, error);\n    const getMinMaxMessage = (exceedMax, maxLengthMessage, minLengthMessage, maxType = INPUT_VALIDATION_RULES.maxLength, minType = INPUT_VALIDATION_RULES.minLength) => {\n        const message = exceedMax ? maxLengthMessage : minLengthMessage;\n        error[name] = {\n            type: exceedMax ? maxType : minType,\n            message,\n            ref,\n            ...appendErrorsCurry(exceedMax ? maxType : minType, message),\n        };\n    };\n    if (isFieldArray\n        ? !Array.isArray(inputValue) || !inputValue.length\n        : required &&\n            ((!isRadioOrCheckbox && (isEmpty || isNullOrUndefined(inputValue))) ||\n                (isBoolean(inputValue) && !inputValue) ||\n                (isCheckBox && !getCheckboxValue(refs).isValid) ||\n                (isRadio && !getRadioValue(refs).isValid))) {\n        const { value, message } = isMessage(required)\n            ? { value: !!required, message: required }\n            : getValueAndMessage(required);\n        if (value) {\n            error[name] = {\n                type: INPUT_VALIDATION_RULES.required,\n                message,\n                ref: inputRef,\n                ...appendErrorsCurry(INPUT_VALIDATION_RULES.required, message),\n            };\n            if (!validateAllFieldCriteria) {\n                setCustomValidity(message);\n                return error;\n            }\n        }\n    }\n    if (!isEmpty && (!isNullOrUndefined(min) || !isNullOrUndefined(max))) {\n        let exceedMax;\n        let exceedMin;\n        const maxOutput = getValueAndMessage(max);\n        const minOutput = getValueAndMessage(min);\n        if (!isNullOrUndefined(inputValue) && !isNaN(inputValue)) {\n            const valueNumber = ref.valueAsNumber ||\n                (inputValue ? +inputValue : inputValue);\n            if (!isNullOrUndefined(maxOutput.value)) {\n                exceedMax = valueNumber > maxOutput.value;\n            }\n            if (!isNullOrUndefined(minOutput.value)) {\n                exceedMin = valueNumber < minOutput.value;\n            }\n        }\n        else {\n            const valueDate = ref.valueAsDate || new Date(inputValue);\n            const convertTimeToDate = (time) => new Date(new Date().toDateString() + ' ' + time);\n            const isTime = ref.type == 'time';\n            const isWeek = ref.type == 'week';\n            if (isString(maxOutput.value) && inputValue) {\n                exceedMax = isTime\n                    ? convertTimeToDate(inputValue) > convertTimeToDate(maxOutput.value)\n                    : isWeek\n                        ? inputValue > maxOutput.value\n                        : valueDate > new Date(maxOutput.value);\n            }\n            if (isString(minOutput.value) && inputValue) {\n                exceedMin = isTime\n                    ? convertTimeToDate(inputValue) < convertTimeToDate(minOutput.value)\n                    : isWeek\n                        ? inputValue < minOutput.value\n                        : valueDate < new Date(minOutput.value);\n            }\n        }\n        if (exceedMax || exceedMin) {\n            getMinMaxMessage(!!exceedMax, maxOutput.message, minOutput.message, INPUT_VALIDATION_RULES.max, INPUT_VALIDATION_RULES.min);\n            if (!validateAllFieldCriteria) {\n                setCustomValidity(error[name].message);\n                return error;\n            }\n        }\n    }\n    if ((maxLength || minLength) &&\n        !isEmpty &&\n        (isString(inputValue) || (isFieldArray && Array.isArray(inputValue)))) {\n        const maxLengthOutput = getValueAndMessage(maxLength);\n        const minLengthOutput = getValueAndMessage(minLength);\n        const exceedMax = !isNullOrUndefined(maxLengthOutput.value) &&\n            inputValue.length > +maxLengthOutput.value;\n        const exceedMin = !isNullOrUndefined(minLengthOutput.value) &&\n            inputValue.length < +minLengthOutput.value;\n        if (exceedMax || exceedMin) {\n            getMinMaxMessage(exceedMax, maxLengthOutput.message, minLengthOutput.message);\n            if (!validateAllFieldCriteria) {\n                setCustomValidity(error[name].message);\n                return error;\n            }\n        }\n    }\n    if (pattern && !isEmpty && isString(inputValue)) {\n        const { value: patternValue, message } = getValueAndMessage(pattern);\n        if (isRegex(patternValue) && !inputValue.match(patternValue)) {\n            error[name] = {\n                type: INPUT_VALIDATION_RULES.pattern,\n                message,\n                ref,\n                ...appendErrorsCurry(INPUT_VALIDATION_RULES.pattern, message),\n            };\n            if (!validateAllFieldCriteria) {\n                setCustomValidity(message);\n                return error;\n            }\n        }\n    }\n    if (validate) {\n        if (isFunction(validate)) {\n            const result = await validate(inputValue, formValues);\n            const validateError = getValidateError(result, inputRef);\n            if (validateError) {\n                error[name] = {\n                    ...validateError,\n                    ...appendErrorsCurry(INPUT_VALIDATION_RULES.validate, validateError.message),\n                };\n                if (!validateAllFieldCriteria) {\n                    setCustomValidity(validateError.message);\n                    return error;\n                }\n            }\n        }\n        else if (isObject(validate)) {\n            let validationResult = {};\n            for (const key in validate) {\n                if (!isEmptyObject(validationResult) && !validateAllFieldCriteria) {\n                    break;\n                }\n                const validateError = getValidateError(await validate[key](inputValue, formValues), inputRef, key);\n                if (validateError) {\n                    validationResult = {\n                        ...validateError,\n                        ...appendErrorsCurry(key, validateError.message),\n                    };\n                    setCustomValidity(validateError.message);\n                    if (validateAllFieldCriteria) {\n                        error[name] = validationResult;\n                    }\n                }\n            }\n            if (!isEmptyObject(validationResult)) {\n                error[name] = {\n                    ref: inputRef,\n                    ...validationResult,\n                };\n                if (!validateAllFieldCriteria) {\n                    return error;\n                }\n            }\n        }\n    }\n    setCustomValidity(true);\n    return error;\n};\n\nfunction append(data, value) {\n    return [...data, ...convertToArrayPayload(value)];\n}\n\nvar fillEmptyArray = (value) => Array.isArray(value) ? value.map(() => undefined) : undefined;\n\nfunction insert(data, index, value) {\n    return [\n        ...data.slice(0, index),\n        ...convertToArrayPayload(value),\n        ...data.slice(index),\n    ];\n}\n\nvar moveArrayAt = (data, from, to) => {\n    if (!Array.isArray(data)) {\n        return [];\n    }\n    if (isUndefined(data[to])) {\n        data[to] = undefined;\n    }\n    data.splice(to, 0, data.splice(from, 1)[0]);\n    return data;\n};\n\nfunction prepend(data, value) {\n    return [...convertToArrayPayload(value), ...convertToArrayPayload(data)];\n}\n\nfunction removeAtIndexes(data, indexes) {\n    let i = 0;\n    const temp = [...data];\n    for (const index of indexes) {\n        temp.splice(index - i, 1);\n        i++;\n    }\n    return compact(temp).length ? temp : [];\n}\nvar removeArrayAt = (data, index) => isUndefined(index)\n    ? []\n    : removeAtIndexes(data, convertToArrayPayload(index).sort((a, b) => a - b));\n\nvar swapArrayAt = (data, indexA, indexB) => {\n    data[indexA] = [data[indexB], (data[indexB] = data[indexA])][0];\n};\n\nfunction baseGet(object, updatePath) {\n    const length = updatePath.slice(0, -1).length;\n    let index = 0;\n    while (index < length) {\n        object = isUndefined(object) ? index++ : object[updatePath[index++]];\n    }\n    return object;\n}\nfunction isEmptyArray(obj) {\n    for (const key in obj) {\n        if (obj.hasOwnProperty(key) && !isUndefined(obj[key])) {\n            return false;\n        }\n    }\n    return true;\n}\nfunction unset(object, path) {\n    const paths = Array.isArray(path)\n        ? path\n        : isKey(path)\n            ? [path]\n            : stringToPath(path);\n    const childObject = paths.length === 1 ? object : baseGet(object, paths);\n    const index = paths.length - 1;\n    const key = paths[index];\n    if (childObject) {\n        delete childObject[key];\n    }\n    if (index !== 0 &&\n        ((isObject(childObject) && isEmptyObject(childObject)) ||\n            (Array.isArray(childObject) && isEmptyArray(childObject)))) {\n        unset(object, paths.slice(0, -1));\n    }\n    return object;\n}\n\nvar updateAt = (fieldValues, index, value) => {\n    fieldValues[index] = value;\n    return fieldValues;\n};\n\n/**\n * A custom hook that exposes convenient methods to perform operations with a list of dynamic inputs that need to be appended, updated, removed etc. • [Demo](https://codesandbox.io/s/react-hook-form-usefieldarray-ssugn) • [Video](https://youtu.be/4MrbfGSFY2A)\n *\n * @remarks\n * [API](https://react-hook-form.com/docs/usefieldarray) • [Demo](https://codesandbox.io/s/react-hook-form-usefieldarray-ssugn)\n *\n * @param props - useFieldArray props\n *\n * @returns methods - functions to manipulate with the Field Arrays (dynamic inputs) {@link UseFieldArrayReturn}\n *\n * @example\n * ```tsx\n * function App() {\n *   const { register, control, handleSubmit, reset, trigger, setError } = useForm({\n *     defaultValues: {\n *       test: []\n *     }\n *   });\n *   const { fields, append } = useFieldArray({\n *     control,\n *     name: \"test\"\n *   });\n *\n *   return (\n *     <form onSubmit={handleSubmit(data => console.log(data))}>\n *       {fields.map((item, index) => (\n *          <input key={item.id} {...register(`test.${index}.firstName`)}  />\n *       ))}\n *       <button type=\"button\" onClick={() => append({ firstName: \"bill\" })}>\n *         append\n *       </button>\n *       <input type=\"submit\" />\n *     </form>\n *   );\n * }\n * ```\n */\nfunction useFieldArray(props) {\n    const methods = useFormContext();\n    const { control = methods.control, name, keyName = 'id', shouldUnregister, } = props;\n    const [fields, setFields] = React.useState(control._getFieldArray(name));\n    const ids = React.useRef(control._getFieldArray(name).map(generateId));\n    const _fieldIds = React.useRef(fields);\n    const _name = React.useRef(name);\n    const _actioned = React.useRef(false);\n    _name.current = name;\n    _fieldIds.current = fields;\n    control._names.array.add(name);\n    props.rules &&\n        control.register(name, props.rules);\n    useSubscribe({\n        next: ({ values, name: fieldArrayName, }) => {\n            if (fieldArrayName === _name.current || !fieldArrayName) {\n                const fieldValues = get(values, _name.current);\n                if (Array.isArray(fieldValues)) {\n                    setFields(fieldValues);\n                    ids.current = fieldValues.map(generateId);\n                }\n            }\n        },\n        subject: control._subjects.array,\n    });\n    const updateValues = React.useCallback((updatedFieldArrayValues) => {\n        _actioned.current = true;\n        control._updateFieldArray(name, updatedFieldArrayValues);\n    }, [control, name]);\n    const append$1 = (value, options) => {\n        const appendValue = convertToArrayPayload(cloneObject(value));\n        const updatedFieldArrayValues = append(control._getFieldArray(name), appendValue);\n        control._names.focus = getFocusFieldName(name, updatedFieldArrayValues.length - 1, options);\n        ids.current = append(ids.current, appendValue.map(generateId));\n        updateValues(updatedFieldArrayValues);\n        setFields(updatedFieldArrayValues);\n        control._updateFieldArray(name, updatedFieldArrayValues, append, {\n            argA: fillEmptyArray(value),\n        });\n    };\n    const prepend$1 = (value, options) => {\n        const prependValue = convertToArrayPayload(cloneObject(value));\n        const updatedFieldArrayValues = prepend(control._getFieldArray(name), prependValue);\n        control._names.focus = getFocusFieldName(name, 0, options);\n        ids.current = prepend(ids.current, prependValue.map(generateId));\n        updateValues(updatedFieldArrayValues);\n        setFields(updatedFieldArrayValues);\n        control._updateFieldArray(name, updatedFieldArrayValues, prepend, {\n            argA: fillEmptyArray(value),\n        });\n    };\n    const remove = (index) => {\n        const updatedFieldArrayValues = removeArrayAt(control._getFieldArray(name), index);\n        ids.current = removeArrayAt(ids.current, index);\n        updateValues(updatedFieldArrayValues);\n        setFields(updatedFieldArrayValues);\n        control._updateFieldArray(name, updatedFieldArrayValues, removeArrayAt, {\n            argA: index,\n        });\n    };\n    const insert$1 = (index, value, options) => {\n        const insertValue = convertToArrayPayload(cloneObject(value));\n        const updatedFieldArrayValues = insert(control._getFieldArray(name), index, insertValue);\n        control._names.focus = getFocusFieldName(name, index, options);\n        ids.current = insert(ids.current, index, insertValue.map(generateId));\n        updateValues(updatedFieldArrayValues);\n        setFields(updatedFieldArrayValues);\n        control._updateFieldArray(name, updatedFieldArrayValues, insert, {\n            argA: index,\n            argB: fillEmptyArray(value),\n        });\n    };\n    const swap = (indexA, indexB) => {\n        const updatedFieldArrayValues = control._getFieldArray(name);\n        swapArrayAt(updatedFieldArrayValues, indexA, indexB);\n        swapArrayAt(ids.current, indexA, indexB);\n        updateValues(updatedFieldArrayValues);\n        setFields(updatedFieldArrayValues);\n        control._updateFieldArray(name, updatedFieldArrayValues, swapArrayAt, {\n            argA: indexA,\n            argB: indexB,\n        }, false);\n    };\n    const move = (from, to) => {\n        const updatedFieldArrayValues = control._getFieldArray(name);\n        moveArrayAt(updatedFieldArrayValues, from, to);\n        moveArrayAt(ids.current, from, to);\n        updateValues(updatedFieldArrayValues);\n        setFields(updatedFieldArrayValues);\n        control._updateFieldArray(name, updatedFieldArrayValues, moveArrayAt, {\n            argA: from,\n            argB: to,\n        }, false);\n    };\n    const update = (index, value) => {\n        const updateValue = cloneObject(value);\n        const updatedFieldArrayValues = updateAt(control._getFieldArray(name), index, updateValue);\n        ids.current = [...updatedFieldArrayValues].map((item, i) => !item || i === index ? generateId() : ids.current[i]);\n        updateValues(updatedFieldArrayValues);\n        setFields([...updatedFieldArrayValues]);\n        control._updateFieldArray(name, updatedFieldArrayValues, updateAt, {\n            argA: index,\n            argB: updateValue,\n        }, true, false);\n    };\n    const replace = (value) => {\n        const updatedFieldArrayValues = convertToArrayPayload(cloneObject(value));\n        ids.current = updatedFieldArrayValues.map(generateId);\n        updateValues([...updatedFieldArrayValues]);\n        setFields([...updatedFieldArrayValues]);\n        control._updateFieldArray(name, [...updatedFieldArrayValues], (data) => data, {}, true, false);\n    };\n    React.useEffect(() => {\n        control._state.action = false;\n        isWatched(name, control._names) &&\n            control._subjects.state.next({\n                ...control._formState,\n            });\n        if (_actioned.current &&\n            (!getValidationModes(control._options.mode).isOnSubmit ||\n                control._formState.isSubmitted)) {\n            if (control._options.resolver) {\n                control._executeSchema([name]).then((result) => {\n                    const error = get(result.errors, name);\n                    const existingError = get(control._formState.errors, name);\n                    if (existingError\n                        ? (!error && existingError.type) ||\n                            (error &&\n                                (existingError.type !== error.type ||\n                                    existingError.message !== error.message))\n                        : error && error.type) {\n                        error\n                            ? set(control._formState.errors, name, error)\n                            : unset(control._formState.errors, name);\n                        control._subjects.state.next({\n                            errors: control._formState.errors,\n                        });\n                    }\n                });\n            }\n            else {\n                const field = get(control._fields, name);\n                if (field && field._f) {\n                    validateField(field, control._formValues, control._options.criteriaMode === VALIDATION_MODE.all, control._options.shouldUseNativeValidation, true).then((error) => !isEmptyObject(error) &&\n                        control._subjects.state.next({\n                            errors: updateFieldArrayRootError(control._formState.errors, error, name),\n                        }));\n                }\n            }\n        }\n        control._subjects.values.next({\n            name,\n            values: { ...control._formValues },\n        });\n        control._names.focus &&\n            focusFieldBy(control._fields, (key) => !!key && key.startsWith(control._names.focus || ''));\n        control._names.focus = '';\n        control._updateValid();\n    }, [fields, name, control]);\n    React.useEffect(() => {\n        !get(control._formValues, name) && control._updateFieldArray(name);\n        return () => {\n            (control._options.shouldUnregister || shouldUnregister) &&\n                control.unregister(name);\n        };\n    }, [name, control, keyName, shouldUnregister]);\n    return {\n        swap: React.useCallback(swap, [updateValues, name, control]),\n        move: React.useCallback(move, [updateValues, name, control]),\n        prepend: React.useCallback(prepend$1, [updateValues, name, control]),\n        append: React.useCallback(append$1, [updateValues, name, control]),\n        remove: React.useCallback(remove, [updateValues, name, control]),\n        insert: React.useCallback(insert$1, [updateValues, name, control]),\n        update: React.useCallback(update, [updateValues, name, control]),\n        replace: React.useCallback(replace, [updateValues, name, control]),\n        fields: React.useMemo(() => fields.map((field, index) => ({\n            ...field,\n            [keyName]: ids.current[index] || generateId(),\n        })), [fields, keyName]),\n    };\n}\n\nfunction createSubject() {\n    let _observers = [];\n    const next = (value) => {\n        for (const observer of _observers) {\n            observer.next && observer.next(value);\n        }\n    };\n    const subscribe = (observer) => {\n        _observers.push(observer);\n        return {\n            unsubscribe: () => {\n                _observers = _observers.filter((o) => o !== observer);\n            },\n        };\n    };\n    const unsubscribe = () => {\n        _observers = [];\n    };\n    return {\n        get observers() {\n            return _observers;\n        },\n        next,\n        subscribe,\n        unsubscribe,\n    };\n}\n\nvar isPrimitive = (value) => isNullOrUndefined(value) || !isObjectType(value);\n\nfunction deepEqual(object1, object2) {\n    if (isPrimitive(object1) || isPrimitive(object2)) {\n        return object1 === object2;\n    }\n    if (isDateObject(object1) && isDateObject(object2)) {\n        return object1.getTime() === object2.getTime();\n    }\n    const keys1 = Object.keys(object1);\n    const keys2 = Object.keys(object2);\n    if (keys1.length !== keys2.length) {\n        return false;\n    }\n    for (const key of keys1) {\n        const val1 = object1[key];\n        if (!keys2.includes(key)) {\n            return false;\n        }\n        if (key !== 'ref') {\n            const val2 = object2[key];\n            if ((isDateObject(val1) && isDateObject(val2)) ||\n                (isObject(val1) && isObject(val2)) ||\n                (Array.isArray(val1) && Array.isArray(val2))\n                ? !deepEqual(val1, val2)\n                : val1 !== val2) {\n                return false;\n            }\n        }\n    }\n    return true;\n}\n\nvar isMultipleSelect = (element) => element.type === `select-multiple`;\n\nvar isRadioOrCheckbox = (ref) => isRadioInput(ref) || isCheckBoxInput(ref);\n\nvar live = (ref) => isHTMLElement(ref) && ref.isConnected;\n\nvar objectHasFunction = (data) => {\n    for (const key in data) {\n        if (isFunction(data[key])) {\n            return true;\n        }\n    }\n    return false;\n};\n\nfunction markFieldsDirty(data, fields = {}) {\n    const isParentNodeArray = Array.isArray(data);\n    if (isObject(data) || isParentNodeArray) {\n        for (const key in data) {\n            if (Array.isArray(data[key]) ||\n                (isObject(data[key]) && !objectHasFunction(data[key]))) {\n                fields[key] = Array.isArray(data[key]) ? [] : {};\n                markFieldsDirty(data[key], fields[key]);\n            }\n            else if (!isNullOrUndefined(data[key])) {\n                fields[key] = true;\n            }\n        }\n    }\n    return fields;\n}\nfunction getDirtyFieldsFromDefaultValues(data, formValues, dirtyFieldsFromValues) {\n    const isParentNodeArray = Array.isArray(data);\n    if (isObject(data) || isParentNodeArray) {\n        for (const key in data) {\n            if (Array.isArray(data[key]) ||\n                (isObject(data[key]) && !objectHasFunction(data[key]))) {\n                if (isUndefined(formValues) ||\n                    isPrimitive(dirtyFieldsFromValues[key])) {\n                    dirtyFieldsFromValues[key] = Array.isArray(data[key])\n                        ? markFieldsDirty(data[key], [])\n                        : { ...markFieldsDirty(data[key]) };\n                }\n                else {\n                    getDirtyFieldsFromDefaultValues(data[key], isNullOrUndefined(formValues) ? {} : formValues[key], dirtyFieldsFromValues[key]);\n                }\n            }\n            else {\n                dirtyFieldsFromValues[key] = !deepEqual(data[key], formValues[key]);\n            }\n        }\n    }\n    return dirtyFieldsFromValues;\n}\nvar getDirtyFields = (defaultValues, formValues) => getDirtyFieldsFromDefaultValues(defaultValues, formValues, markFieldsDirty(formValues));\n\nvar getFieldValueAs = (value, { valueAsNumber, valueAsDate, setValueAs }) => isUndefined(value)\n    ? value\n    : valueAsNumber\n        ? value === ''\n            ? NaN\n            : value\n                ? +value\n                : value\n        : valueAsDate && isString(value)\n            ? new Date(value)\n            : setValueAs\n                ? setValueAs(value)\n                : value;\n\nfunction getFieldValue(_f) {\n    const ref = _f.ref;\n    if (_f.refs ? _f.refs.every((ref) => ref.disabled) : ref.disabled) {\n        return;\n    }\n    if (isFileInput(ref)) {\n        return ref.files;\n    }\n    if (isRadioInput(ref)) {\n        return getRadioValue(_f.refs).value;\n    }\n    if (isMultipleSelect(ref)) {\n        return [...ref.selectedOptions].map(({ value }) => value);\n    }\n    if (isCheckBoxInput(ref)) {\n        return getCheckboxValue(_f.refs).value;\n    }\n    return getFieldValueAs(isUndefined(ref.value) ? _f.ref.value : ref.value, _f);\n}\n\nvar getResolverOptions = (fieldsNames, _fields, criteriaMode, shouldUseNativeValidation) => {\n    const fields = {};\n    for (const name of fieldsNames) {\n        const field = get(_fields, name);\n        field && set(fields, name, field._f);\n    }\n    return {\n        criteriaMode,\n        names: [...fieldsNames],\n        fields,\n        shouldUseNativeValidation,\n    };\n};\n\nvar getRuleValue = (rule) => isUndefined(rule)\n    ? rule\n    : isRegex(rule)\n        ? rule.source\n        : isObject(rule)\n            ? isRegex(rule.value)\n                ? rule.value.source\n                : rule.value\n            : rule;\n\nvar hasValidation = (options) => options.mount &&\n    (options.required ||\n        options.min ||\n        options.max ||\n        options.maxLength ||\n        options.minLength ||\n        options.pattern ||\n        options.validate);\n\nfunction schemaErrorLookup(errors, _fields, name) {\n    const error = get(errors, name);\n    if (error || isKey(name)) {\n        return {\n            error,\n            name,\n        };\n    }\n    const names = name.split('.');\n    while (names.length) {\n        const fieldName = names.join('.');\n        const field = get(_fields, fieldName);\n        const foundError = get(errors, fieldName);\n        if (field && !Array.isArray(field) && name !== fieldName) {\n            return { name };\n        }\n        if (foundError && foundError.type) {\n            return {\n                name: fieldName,\n                error: foundError,\n            };\n        }\n        names.pop();\n    }\n    return {\n        name,\n    };\n}\n\nvar skipValidation = (isBlurEvent, isTouched, isSubmitted, reValidateMode, mode) => {\n    if (mode.isOnAll) {\n        return false;\n    }\n    else if (!isSubmitted && mode.isOnTouch) {\n        return !(isTouched || isBlurEvent);\n    }\n    else if (isSubmitted ? reValidateMode.isOnBlur : mode.isOnBlur) {\n        return !isBlurEvent;\n    }\n    else if (isSubmitted ? reValidateMode.isOnChange : mode.isOnChange) {\n        return isBlurEvent;\n    }\n    return true;\n};\n\nvar unsetEmptyArray = (ref, name) => !compact(get(ref, name)).length && unset(ref, name);\n\nconst defaultOptions = {\n    mode: VALIDATION_MODE.onSubmit,\n    reValidateMode: VALIDATION_MODE.onChange,\n    shouldFocusError: true,\n};\nfunction createFormControl(props = {}, flushRootRender) {\n    let _options = {\n        ...defaultOptions,\n        ...props,\n    };\n    let _formState = {\n        submitCount: 0,\n        isDirty: false,\n        isLoading: isFunction(_options.defaultValues),\n        isValidating: false,\n        isSubmitted: false,\n        isSubmitting: false,\n        isSubmitSuccessful: false,\n        isValid: false,\n        touchedFields: {},\n        dirtyFields: {},\n        errors: {},\n    };\n    let _fields = {};\n    let _defaultValues = isObject(_options.defaultValues) || isObject(_options.values)\n        ? cloneObject(_options.defaultValues || _options.values) || {}\n        : {};\n    let _formValues = _options.shouldUnregister\n        ? {}\n        : cloneObject(_defaultValues);\n    let _state = {\n        action: false,\n        mount: false,\n        watch: false,\n    };\n    let _names = {\n        mount: new Set(),\n        unMount: new Set(),\n        array: new Set(),\n        watch: new Set(),\n    };\n    let delayErrorCallback;\n    let timer = 0;\n    const _proxyFormState = {\n        isDirty: false,\n        dirtyFields: false,\n        touchedFields: false,\n        isValidating: false,\n        isValid: false,\n        errors: false,\n    };\n    const _subjects = {\n        values: createSubject(),\n        array: createSubject(),\n        state: createSubject(),\n    };\n    const shouldCaptureDirtyFields = props.resetOptions && props.resetOptions.keepDirtyValues;\n    const validationModeBeforeSubmit = getValidationModes(_options.mode);\n    const validationModeAfterSubmit = getValidationModes(_options.reValidateMode);\n    const shouldDisplayAllAssociatedErrors = _options.criteriaMode === VALIDATION_MODE.all;\n    const debounce = (callback) => (wait) => {\n        clearTimeout(timer);\n        timer = setTimeout(callback, wait);\n    };\n    const _updateValid = async (shouldUpdateValid) => {\n        if (_proxyFormState.isValid || shouldUpdateValid) {\n            const isValid = _options.resolver\n                ? isEmptyObject((await _executeSchema()).errors)\n                : await executeBuiltInValidation(_fields, true);\n            if (isValid !== _formState.isValid) {\n                _subjects.state.next({\n                    isValid,\n                });\n            }\n        }\n    };\n    const _updateIsValidating = (value) => _proxyFormState.isValidating &&\n        _subjects.state.next({\n            isValidating: value,\n        });\n    const _updateFieldArray = (name, values = [], method, args, shouldSetValues = true, shouldUpdateFieldsAndState = true) => {\n        if (args && method) {\n            _state.action = true;\n            if (shouldUpdateFieldsAndState && Array.isArray(get(_fields, name))) {\n                const fieldValues = method(get(_fields, name), args.argA, args.argB);\n                shouldSetValues && set(_fields, name, fieldValues);\n            }\n            if (shouldUpdateFieldsAndState &&\n                Array.isArray(get(_formState.errors, name))) {\n                const errors = method(get(_formState.errors, name), args.argA, args.argB);\n                shouldSetValues && set(_formState.errors, name, errors);\n                unsetEmptyArray(_formState.errors, name);\n            }\n            if (_proxyFormState.touchedFields &&\n                shouldUpdateFieldsAndState &&\n                Array.isArray(get(_formState.touchedFields, name))) {\n                const touchedFields = method(get(_formState.touchedFields, name), args.argA, args.argB);\n                shouldSetValues && set(_formState.touchedFields, name, touchedFields);\n            }\n            if (_proxyFormState.dirtyFields) {\n                _formState.dirtyFields = getDirtyFields(_defaultValues, _formValues);\n            }\n            _subjects.state.next({\n                name,\n                isDirty: _getDirty(name, values),\n                dirtyFields: _formState.dirtyFields,\n                errors: _formState.errors,\n                isValid: _formState.isValid,\n            });\n        }\n        else {\n            set(_formValues, name, values);\n        }\n    };\n    const updateErrors = (name, error) => {\n        set(_formState.errors, name, error);\n        _subjects.state.next({\n            errors: _formState.errors,\n        });\n    };\n    const updateValidAndValue = (name, shouldSkipSetValueAs, value, ref) => {\n        const field = get(_fields, name);\n        if (field) {\n            const defaultValue = get(_formValues, name, isUndefined(value) ? get(_defaultValues, name) : value);\n            isUndefined(defaultValue) ||\n                (ref && ref.defaultChecked) ||\n                shouldSkipSetValueAs\n                ? set(_formValues, name, shouldSkipSetValueAs ? defaultValue : getFieldValue(field._f))\n                : setFieldValue(name, defaultValue);\n            _state.mount && _updateValid();\n        }\n    };\n    const updateTouchAndDirty = (name, fieldValue, isBlurEvent, shouldDirty, shouldRender) => {\n        let shouldUpdateField = false;\n        let isPreviousDirty = false;\n        const output = {\n            name,\n        };\n        if (!isBlurEvent || shouldDirty) {\n            if (_proxyFormState.isDirty) {\n                isPreviousDirty = _formState.isDirty;\n                _formState.isDirty = output.isDirty = _getDirty();\n                shouldUpdateField = isPreviousDirty !== output.isDirty;\n            }\n            const isCurrentFieldPristine = deepEqual(get(_defaultValues, name), fieldValue);\n            isPreviousDirty = get(_formState.dirtyFields, name);\n            isCurrentFieldPristine\n                ? unset(_formState.dirtyFields, name)\n                : set(_formState.dirtyFields, name, true);\n            output.dirtyFields = _formState.dirtyFields;\n            shouldUpdateField =\n                shouldUpdateField ||\n                    (_proxyFormState.dirtyFields &&\n                        isPreviousDirty !== !isCurrentFieldPristine);\n        }\n        if (isBlurEvent) {\n            const isPreviousFieldTouched = get(_formState.touchedFields, name);\n            if (!isPreviousFieldTouched) {\n                set(_formState.touchedFields, name, isBlurEvent);\n                output.touchedFields = _formState.touchedFields;\n                shouldUpdateField =\n                    shouldUpdateField ||\n                        (_proxyFormState.touchedFields &&\n                            isPreviousFieldTouched !== isBlurEvent);\n            }\n        }\n        shouldUpdateField && shouldRender && _subjects.state.next(output);\n        return shouldUpdateField ? output : {};\n    };\n    const shouldRenderByError = (name, isValid, error, fieldState) => {\n        const previousFieldError = get(_formState.errors, name);\n        const shouldUpdateValid = _proxyFormState.isValid &&\n            isBoolean(isValid) &&\n            _formState.isValid !== isValid;\n        if (props.delayError && error) {\n            delayErrorCallback = debounce(() => updateErrors(name, error));\n            delayErrorCallback(props.delayError);\n        }\n        else {\n            clearTimeout(timer);\n            delayErrorCallback = null;\n            error\n                ? set(_formState.errors, name, error)\n                : unset(_formState.errors, name);\n        }\n        if ((error ? !deepEqual(previousFieldError, error) : previousFieldError) ||\n            !isEmptyObject(fieldState) ||\n            shouldUpdateValid) {\n            const updatedFormState = {\n                ...fieldState,\n                ...(shouldUpdateValid && isBoolean(isValid) ? { isValid } : {}),\n                errors: _formState.errors,\n                name,\n            };\n            _formState = {\n                ..._formState,\n                ...updatedFormState,\n            };\n            _subjects.state.next(updatedFormState);\n        }\n        _updateIsValidating(false);\n    };\n    const _executeSchema = async (name) => _options.resolver(_formValues, _options.context, getResolverOptions(name || _names.mount, _fields, _options.criteriaMode, _options.shouldUseNativeValidation));\n    const executeSchemaAndUpdateState = async (names) => {\n        const { errors } = await _executeSchema();\n        if (names) {\n            for (const name of names) {\n                const error = get(errors, name);\n                error\n                    ? set(_formState.errors, name, error)\n                    : unset(_formState.errors, name);\n            }\n        }\n        else {\n            _formState.errors = errors;\n        }\n        return errors;\n    };\n    const executeBuiltInValidation = async (fields, shouldOnlyCheckValid, context = {\n        valid: true,\n    }) => {\n        for (const name in fields) {\n            const field = fields[name];\n            if (field) {\n                const { _f, ...fieldValue } = field;\n                if (_f) {\n                    const isFieldArrayRoot = _names.array.has(_f.name);\n                    const fieldError = await validateField(field, _formValues, shouldDisplayAllAssociatedErrors, _options.shouldUseNativeValidation && !shouldOnlyCheckValid, isFieldArrayRoot);\n                    if (fieldError[_f.name]) {\n                        context.valid = false;\n                        if (shouldOnlyCheckValid) {\n                            break;\n                        }\n                    }\n                    !shouldOnlyCheckValid &&\n                        (get(fieldError, _f.name)\n                            ? isFieldArrayRoot\n                                ? updateFieldArrayRootError(_formState.errors, fieldError, _f.name)\n                                : set(_formState.errors, _f.name, fieldError[_f.name])\n                            : unset(_formState.errors, _f.name));\n                }\n                fieldValue &&\n                    (await executeBuiltInValidation(fieldValue, shouldOnlyCheckValid, context));\n            }\n        }\n        return context.valid;\n    };\n    const _removeUnmounted = () => {\n        for (const name of _names.unMount) {\n            const field = get(_fields, name);\n            field &&\n                (field._f.refs\n                    ? field._f.refs.every((ref) => !live(ref))\n                    : !live(field._f.ref)) &&\n                unregister(name);\n        }\n        _names.unMount = new Set();\n    };\n    const _getDirty = (name, data) => (name && data && set(_formValues, name, data),\n        !deepEqual(getValues(), _defaultValues));\n    const _getWatch = (names, defaultValue, isGlobal) => generateWatchOutput(names, _names, {\n        ...(_state.mount\n            ? _formValues\n            : isUndefined(defaultValue)\n                ? _defaultValues\n                : isString(names)\n                    ? { [names]: defaultValue }\n                    : defaultValue),\n    }, isGlobal, defaultValue);\n    const _getFieldArray = (name) => compact(get(_state.mount ? _formValues : _defaultValues, name, props.shouldUnregister ? get(_defaultValues, name, []) : []));\n    const setFieldValue = (name, value, options = {}) => {\n        const field = get(_fields, name);\n        let fieldValue = value;\n        if (field) {\n            const fieldReference = field._f;\n            if (fieldReference) {\n                !fieldReference.disabled &&\n                    set(_formValues, name, getFieldValueAs(value, fieldReference));\n                fieldValue =\n                    isHTMLElement(fieldReference.ref) && isNullOrUndefined(value)\n                        ? ''\n                        : value;\n                if (isMultipleSelect(fieldReference.ref)) {\n                    [...fieldReference.ref.options].forEach((optionRef) => (optionRef.selected = fieldValue.includes(optionRef.value)));\n                }\n                else if (fieldReference.refs) {\n                    if (isCheckBoxInput(fieldReference.ref)) {\n                        fieldReference.refs.length > 1\n                            ? fieldReference.refs.forEach((checkboxRef) => (!checkboxRef.defaultChecked || !checkboxRef.disabled) &&\n                                (checkboxRef.checked = Array.isArray(fieldValue)\n                                    ? !!fieldValue.find((data) => data === checkboxRef.value)\n                                    : fieldValue === checkboxRef.value))\n                            : fieldReference.refs[0] &&\n                                (fieldReference.refs[0].checked = !!fieldValue);\n                    }\n                    else {\n                        fieldReference.refs.forEach((radioRef) => (radioRef.checked = radioRef.value === fieldValue));\n                    }\n                }\n                else if (isFileInput(fieldReference.ref)) {\n                    fieldReference.ref.value = '';\n                }\n                else {\n                    fieldReference.ref.value = fieldValue;\n                    if (!fieldReference.ref.type) {\n                        _subjects.values.next({\n                            name,\n                            values: { ..._formValues },\n                        });\n                    }\n                }\n            }\n        }\n        (options.shouldDirty || options.shouldTouch) &&\n            updateTouchAndDirty(name, fieldValue, options.shouldTouch, options.shouldDirty, true);\n        options.shouldValidate && trigger(name);\n    };\n    const setValues = (name, value, options) => {\n        for (const fieldKey in value) {\n            const fieldValue = value[fieldKey];\n            const fieldName = `${name}.${fieldKey}`;\n            const field = get(_fields, fieldName);\n            (_names.array.has(name) ||\n                !isPrimitive(fieldValue) ||\n                (field && !field._f)) &&\n                !isDateObject(fieldValue)\n                ? setValues(fieldName, fieldValue, options)\n                : setFieldValue(fieldName, fieldValue, options);\n        }\n    };\n    const setValue = (name, value, options = {}) => {\n        const field = get(_fields, name);\n        const isFieldArray = _names.array.has(name);\n        const cloneValue = cloneObject(value);\n        set(_formValues, name, cloneValue);\n        if (isFieldArray) {\n            _subjects.array.next({\n                name,\n                values: { ..._formValues },\n            });\n            if ((_proxyFormState.isDirty || _proxyFormState.dirtyFields) &&\n                options.shouldDirty) {\n                _subjects.state.next({\n                    name,\n                    dirtyFields: getDirtyFields(_defaultValues, _formValues),\n                    isDirty: _getDirty(name, cloneValue),\n                });\n            }\n        }\n        else {\n            field && !field._f && !isNullOrUndefined(cloneValue)\n                ? setValues(name, cloneValue, options)\n                : setFieldValue(name, cloneValue, options);\n        }\n        isWatched(name, _names) && _subjects.state.next({ ..._formState });\n        _subjects.values.next({\n            name,\n            values: { ..._formValues },\n        });\n        !_state.mount && flushRootRender();\n    };\n    const onChange = async (event) => {\n        const target = event.target;\n        let name = target.name;\n        let isFieldValueUpdated = true;\n        const field = get(_fields, name);\n        const getCurrentFieldValue = () => target.type ? getFieldValue(field._f) : getEventValue(event);\n        if (field) {\n            let error;\n            let isValid;\n            const fieldValue = getCurrentFieldValue();\n            const isBlurEvent = event.type === EVENTS.BLUR || event.type === EVENTS.FOCUS_OUT;\n            const shouldSkipValidation = (!hasValidation(field._f) &&\n                !_options.resolver &&\n                !get(_formState.errors, name) &&\n                !field._f.deps) ||\n                skipValidation(isBlurEvent, get(_formState.touchedFields, name), _formState.isSubmitted, validationModeAfterSubmit, validationModeBeforeSubmit);\n            const watched = isWatched(name, _names, isBlurEvent);\n            set(_formValues, name, fieldValue);\n            if (isBlurEvent) {\n                field._f.onBlur && field._f.onBlur(event);\n                delayErrorCallback && delayErrorCallback(0);\n            }\n            else if (field._f.onChange) {\n                field._f.onChange(event);\n            }\n            const fieldState = updateTouchAndDirty(name, fieldValue, isBlurEvent, false);\n            const shouldRender = !isEmptyObject(fieldState) || watched;\n            !isBlurEvent &&\n                _subjects.values.next({\n                    name,\n                    type: event.type,\n                    values: { ..._formValues },\n                });\n            if (shouldSkipValidation) {\n                _proxyFormState.isValid && _updateValid();\n                return (shouldRender &&\n                    _subjects.state.next({ name, ...(watched ? {} : fieldState) }));\n            }\n            !isBlurEvent && watched && _subjects.state.next({ ..._formState });\n            _updateIsValidating(true);\n            if (_options.resolver) {\n                const { errors } = await _executeSchema([name]);\n                const previousErrorLookupResult = schemaErrorLookup(_formState.errors, _fields, name);\n                const errorLookupResult = schemaErrorLookup(errors, _fields, previousErrorLookupResult.name || name);\n                error = errorLookupResult.error;\n                name = errorLookupResult.name;\n                isValid = isEmptyObject(errors);\n            }\n            else {\n                error = (await validateField(field, _formValues, shouldDisplayAllAssociatedErrors, _options.shouldUseNativeValidation))[name];\n                isFieldValueUpdated =\n                    isNaN(fieldValue) ||\n                        fieldValue === get(_formValues, name, fieldValue);\n                if (isFieldValueUpdated) {\n                    if (error) {\n                        isValid = false;\n                    }\n                    else if (_proxyFormState.isValid) {\n                        isValid = await executeBuiltInValidation(_fields, true);\n                    }\n                }\n            }\n            if (isFieldValueUpdated) {\n                field._f.deps &&\n                    trigger(field._f.deps);\n                shouldRenderByError(name, isValid, error, fieldState);\n            }\n        }\n    };\n    const trigger = async (name, options = {}) => {\n        let isValid;\n        let validationResult;\n        const fieldNames = convertToArrayPayload(name);\n        _updateIsValidating(true);\n        if (_options.resolver) {\n            const errors = await executeSchemaAndUpdateState(isUndefined(name) ? name : fieldNames);\n            isValid = isEmptyObject(errors);\n            validationResult = name\n                ? !fieldNames.some((name) => get(errors, name))\n                : isValid;\n        }\n        else if (name) {\n            validationResult = (await Promise.all(fieldNames.map(async (fieldName) => {\n                const field = get(_fields, fieldName);\n                return await executeBuiltInValidation(field && field._f ? { [fieldName]: field } : field);\n            }))).every(Boolean);\n            !(!validationResult && !_formState.isValid) && _updateValid();\n        }\n        else {\n            validationResult = isValid = await executeBuiltInValidation(_fields);\n        }\n        _subjects.state.next({\n            ...(!isString(name) ||\n                (_proxyFormState.isValid && isValid !== _formState.isValid)\n                ? {}\n                : { name }),\n            ...(_options.resolver || !name ? { isValid } : {}),\n            errors: _formState.errors,\n            isValidating: false,\n        });\n        options.shouldFocus &&\n            !validationResult &&\n            focusFieldBy(_fields, (key) => key && get(_formState.errors, key), name ? fieldNames : _names.mount);\n        return validationResult;\n    };\n    const getValues = (fieldNames) => {\n        const values = {\n            ..._defaultValues,\n            ...(_state.mount ? _formValues : {}),\n        };\n        return isUndefined(fieldNames)\n            ? values\n            : isString(fieldNames)\n                ? get(values, fieldNames)\n                : fieldNames.map((name) => get(values, name));\n    };\n    const getFieldState = (name, formState) => ({\n        invalid: !!get((formState || _formState).errors, name),\n        isDirty: !!get((formState || _formState).dirtyFields, name),\n        isTouched: !!get((formState || _formState).touchedFields, name),\n        error: get((formState || _formState).errors, name),\n    });\n    const clearErrors = (name) => {\n        name &&\n            convertToArrayPayload(name).forEach((inputName) => unset(_formState.errors, inputName));\n        _subjects.state.next({\n            errors: name ? _formState.errors : {},\n        });\n    };\n    const setError = (name, error, options) => {\n        const ref = (get(_fields, name, { _f: {} })._f || {}).ref;\n        set(_formState.errors, name, {\n            ...error,\n            ref,\n        });\n        _subjects.state.next({\n            name,\n            errors: _formState.errors,\n            isValid: false,\n        });\n        options && options.shouldFocus && ref && ref.focus && ref.focus();\n    };\n    const watch = (name, defaultValue) => isFunction(name)\n        ? _subjects.values.subscribe({\n            next: (payload) => name(_getWatch(undefined, defaultValue), payload),\n        })\n        : _getWatch(name, defaultValue, true);\n    const unregister = (name, options = {}) => {\n        for (const fieldName of name ? convertToArrayPayload(name) : _names.mount) {\n            _names.mount.delete(fieldName);\n            _names.array.delete(fieldName);\n            if (!options.keepValue) {\n                unset(_fields, fieldName);\n                unset(_formValues, fieldName);\n            }\n            !options.keepError && unset(_formState.errors, fieldName);\n            !options.keepDirty && unset(_formState.dirtyFields, fieldName);\n            !options.keepTouched && unset(_formState.touchedFields, fieldName);\n            !_options.shouldUnregister &&\n                !options.keepDefaultValue &&\n                unset(_defaultValues, fieldName);\n        }\n        _subjects.values.next({\n            values: { ..._formValues },\n        });\n        _subjects.state.next({\n            ..._formState,\n            ...(!options.keepDirty ? {} : { isDirty: _getDirty() }),\n        });\n        !options.keepIsValid && _updateValid();\n    };\n    const register = (name, options = {}) => {\n        let field = get(_fields, name);\n        const disabledIsDefined = isBoolean(options.disabled);\n        set(_fields, name, {\n            ...(field || {}),\n            _f: {\n                ...(field && field._f ? field._f : { ref: { name } }),\n                name,\n                mount: true,\n                ...options,\n            },\n        });\n        _names.mount.add(name);\n        if (!isUndefined(options.value)) {\n            set(_formValues, name, options.value);\n        }\n        field\n            ? disabledIsDefined &&\n                set(_formValues, name, options.disabled\n                    ? undefined\n                    : get(_formValues, name, getFieldValue(field._f)))\n            : updateValidAndValue(name, true, options.value);\n        return {\n            ...(disabledIsDefined ? { disabled: options.disabled } : {}),\n            ...(_options.progressive\n                ? {\n                    required: !!options.required,\n                    min: getRuleValue(options.min),\n                    max: getRuleValue(options.max),\n                    minLength: getRuleValue(options.minLength),\n                    maxLength: getRuleValue(options.maxLength),\n                    pattern: getRuleValue(options.pattern),\n                }\n                : {}),\n            name,\n            onChange,\n            onBlur: onChange,\n            ref: (ref) => {\n                if (ref) {\n                    register(name, options);\n                    field = get(_fields, name);\n                    const fieldRef = isUndefined(ref.value)\n                        ? ref.querySelectorAll\n                            ? ref.querySelectorAll('input,select,textarea')[0] || ref\n                            : ref\n                        : ref;\n                    const radioOrCheckbox = isRadioOrCheckbox(fieldRef);\n                    const refs = field._f.refs || [];\n                    if (radioOrCheckbox\n                        ? refs.find((option) => option === fieldRef)\n                        : fieldRef === field._f.ref) {\n                        return;\n                    }\n                    set(_fields, name, {\n                        _f: {\n                            ...field._f,\n                            ...(radioOrCheckbox\n                                ? {\n                                    refs: [\n                                        ...refs.filter(live),\n                                        fieldRef,\n                                        ...(Array.isArray(get(_defaultValues, name)) ? [{}] : []),\n                                    ],\n                                    ref: { type: fieldRef.type, name },\n                                }\n                                : { ref: fieldRef }),\n                        },\n                    });\n                    updateValidAndValue(name, false, undefined, fieldRef);\n                }\n                else {\n                    field = get(_fields, name, {});\n                    if (field._f) {\n                        field._f.mount = false;\n                    }\n                    (_options.shouldUnregister || options.shouldUnregister) &&\n                        !(isNameInFieldArray(_names.array, name) && _state.action) &&\n                        _names.unMount.add(name);\n                }\n            },\n        };\n    };\n    const _focusError = () => _options.shouldFocusError &&\n        focusFieldBy(_fields, (key) => key && get(_formState.errors, key), _names.mount);\n    const handleSubmit = (onValid, onInvalid) => async (e) => {\n        if (e) {\n            e.preventDefault && e.preventDefault();\n            e.persist && e.persist();\n        }\n        let fieldValues = cloneObject(_formValues);\n        _subjects.state.next({\n            isSubmitting: true,\n        });\n        if (_options.resolver) {\n            const { errors, values } = await _executeSchema();\n            _formState.errors = errors;\n            fieldValues = values;\n        }\n        else {\n            await executeBuiltInValidation(_fields);\n        }\n        unset(_formState.errors, 'root');\n        if (isEmptyObject(_formState.errors)) {\n            _subjects.state.next({\n                errors: {},\n            });\n            await onValid(fieldValues, e);\n        }\n        else {\n            if (onInvalid) {\n                await onInvalid({ ..._formState.errors }, e);\n            }\n            _focusError();\n            setTimeout(_focusError);\n        }\n        _subjects.state.next({\n            isSubmitted: true,\n            isSubmitting: false,\n            isSubmitSuccessful: isEmptyObject(_formState.errors),\n            submitCount: _formState.submitCount + 1,\n            errors: _formState.errors,\n        });\n    };\n    const resetField = (name, options = {}) => {\n        if (get(_fields, name)) {\n            if (isUndefined(options.defaultValue)) {\n                setValue(name, get(_defaultValues, name));\n            }\n            else {\n                setValue(name, options.defaultValue);\n                set(_defaultValues, name, options.defaultValue);\n            }\n            if (!options.keepTouched) {\n                unset(_formState.touchedFields, name);\n            }\n            if (!options.keepDirty) {\n                unset(_formState.dirtyFields, name);\n                _formState.isDirty = options.defaultValue\n                    ? _getDirty(name, get(_defaultValues, name))\n                    : _getDirty();\n            }\n            if (!options.keepError) {\n                unset(_formState.errors, name);\n                _proxyFormState.isValid && _updateValid();\n            }\n            _subjects.state.next({ ..._formState });\n        }\n    };\n    const _reset = (formValues, keepStateOptions = {}) => {\n        const updatedValues = formValues || _defaultValues;\n        const cloneUpdatedValues = cloneObject(updatedValues);\n        const values = formValues && !isEmptyObject(formValues)\n            ? cloneUpdatedValues\n            : _defaultValues;\n        if (!keepStateOptions.keepDefaultValues) {\n            _defaultValues = updatedValues;\n        }\n        if (!keepStateOptions.keepValues) {\n            if (keepStateOptions.keepDirtyValues || shouldCaptureDirtyFields) {\n                for (const fieldName of _names.mount) {\n                    get(_formState.dirtyFields, fieldName)\n                        ? set(values, fieldName, get(_formValues, fieldName))\n                        : setValue(fieldName, get(values, fieldName));\n                }\n            }\n            else {\n                if (isWeb && isUndefined(formValues)) {\n                    for (const name of _names.mount) {\n                        const field = get(_fields, name);\n                        if (field && field._f) {\n                            const fieldReference = Array.isArray(field._f.refs)\n                                ? field._f.refs[0]\n                                : field._f.ref;\n                            if (isHTMLElement(fieldReference)) {\n                                const form = fieldReference.closest('form');\n                                if (form) {\n                                    form.reset();\n                                    break;\n                                }\n                            }\n                        }\n                    }\n                }\n                _fields = {};\n            }\n            _formValues = props.shouldUnregister\n                ? keepStateOptions.keepDefaultValues\n                    ? cloneObject(_defaultValues)\n                    : {}\n                : cloneObject(values);\n            _subjects.array.next({\n                values: { ...values },\n            });\n            _subjects.values.next({\n                values: { ...values },\n            });\n        }\n        _names = {\n            mount: new Set(),\n            unMount: new Set(),\n            array: new Set(),\n            watch: new Set(),\n            watchAll: false,\n            focus: '',\n        };\n        !_state.mount && flushRootRender();\n        _state.mount = !_proxyFormState.isValid || !!keepStateOptions.keepIsValid;\n        _state.watch = !!props.shouldUnregister;\n        _subjects.state.next({\n            submitCount: keepStateOptions.keepSubmitCount\n                ? _formState.submitCount\n                : 0,\n            isDirty: keepStateOptions.keepDirty\n                ? _formState.isDirty\n                : !!(keepStateOptions.keepDefaultValues &&\n                    !deepEqual(formValues, _defaultValues)),\n            isSubmitted: keepStateOptions.keepIsSubmitted\n                ? _formState.isSubmitted\n                : false,\n            dirtyFields: keepStateOptions.keepDirtyValues\n                ? _formState.dirtyFields\n                : keepStateOptions.keepDefaultValues && formValues\n                    ? getDirtyFields(_defaultValues, formValues)\n                    : {},\n            touchedFields: keepStateOptions.keepTouched\n                ? _formState.touchedFields\n                : {},\n            errors: keepStateOptions.keepErrors ? _formState.errors : {},\n            isSubmitting: false,\n            isSubmitSuccessful: false,\n        });\n    };\n    const reset = (formValues, keepStateOptions) => _reset(isFunction(formValues)\n        ? formValues(_formValues)\n        : formValues, keepStateOptions);\n    const setFocus = (name, options = {}) => {\n        const field = get(_fields, name);\n        const fieldReference = field && field._f;\n        if (fieldReference) {\n            const fieldRef = fieldReference.refs\n                ? fieldReference.refs[0]\n                : fieldReference.ref;\n            if (fieldRef.focus) {\n                fieldRef.focus();\n                options.shouldSelect && fieldRef.select();\n            }\n        }\n    };\n    const _updateFormState = (updatedFormState) => {\n        _formState = {\n            ..._formState,\n            ...updatedFormState,\n        };\n    };\n    const _resetDefaultValues = () => isFunction(_options.defaultValues) &&\n        _options.defaultValues().then((values) => {\n            reset(values, _options.resetOptions);\n            _subjects.state.next({\n                isLoading: false,\n            });\n        });\n    return {\n        control: {\n            register,\n            unregister,\n            getFieldState,\n            handleSubmit,\n            setError,\n            _executeSchema,\n            _getWatch,\n            _getDirty,\n            _updateValid,\n            _removeUnmounted,\n            _updateFieldArray,\n            _getFieldArray,\n            _reset,\n            _resetDefaultValues,\n            _updateFormState,\n            _subjects,\n            _proxyFormState,\n            get _fields() {\n                return _fields;\n            },\n            get _formValues() {\n                return _formValues;\n            },\n            get _state() {\n                return _state;\n            },\n            set _state(value) {\n                _state = value;\n            },\n            get _defaultValues() {\n                return _defaultValues;\n            },\n            get _names() {\n                return _names;\n            },\n            set _names(value) {\n                _names = value;\n            },\n            get _formState() {\n                return _formState;\n            },\n            set _formState(value) {\n                _formState = value;\n            },\n            get _options() {\n                return _options;\n            },\n            set _options(value) {\n                _options = {\n                    ..._options,\n                    ...value,\n                };\n            },\n        },\n        trigger,\n        register,\n        handleSubmit,\n        watch,\n        setValue,\n        getValues,\n        reset,\n        resetField,\n        clearErrors,\n        unregister,\n        setError,\n        setFocus,\n        getFieldState,\n    };\n}\n\n/**\n * Custom hook to manage the entire form.\n *\n * @remarks\n * [API](https://react-hook-form.com/docs/useform) • [Demo](https://codesandbox.io/s/react-hook-form-get-started-ts-5ksmm) • [Video](https://www.youtube.com/watch?v=RkXv4AXXC_4)\n *\n * @param props - form configuration and validation parameters.\n *\n * @returns methods - individual functions to manage the form state. {@link UseFormReturn}\n *\n * @example\n * ```tsx\n * function App() {\n *   const { register, handleSubmit, watch, formState: { errors } } = useForm();\n *   const onSubmit = data => console.log(data);\n *\n *   console.log(watch(\"example\"));\n *\n *   return (\n *     <form onSubmit={handleSubmit(onSubmit)}>\n *       <input defaultValue=\"test\" {...register(\"example\")} />\n *       <input {...register(\"exampleRequired\", { required: true })} />\n *       {errors.exampleRequired && <span>This field is required</span>}\n *       <button>Submit</button>\n *     </form>\n *   );\n * }\n * ```\n */\nfunction useForm(props = {}) {\n    const _formControl = React.useRef();\n    const _values = React.useRef();\n    const [formState, updateFormState] = React.useState({\n        isDirty: false,\n        isValidating: false,\n        isLoading: isFunction(props.defaultValues),\n        isSubmitted: false,\n        isSubmitting: false,\n        isSubmitSuccessful: false,\n        isValid: false,\n        submitCount: 0,\n        dirtyFields: {},\n        touchedFields: {},\n        errors: {},\n        defaultValues: isFunction(props.defaultValues)\n            ? undefined\n            : props.defaultValues,\n    });\n    if (!_formControl.current) {\n        _formControl.current = {\n            ...createFormControl(props, () => updateFormState((formState) => ({ ...formState }))),\n            formState,\n        };\n    }\n    const control = _formControl.current.control;\n    control._options = props;\n    useSubscribe({\n        subject: control._subjects.state,\n        next: (value) => {\n            if (shouldRenderFormState(value, control._proxyFormState, control._updateFormState, true)) {\n                updateFormState({ ...control._formState });\n            }\n        },\n    });\n    React.useEffect(() => {\n        if (props.values && !deepEqual(props.values, _values.current)) {\n            control._reset(props.values, control._options.resetOptions);\n            _values.current = props.values;\n        }\n        else {\n            control._resetDefaultValues();\n        }\n    }, [props.values, control]);\n    React.useEffect(() => {\n        if (!control._state.mount) {\n            control._updateValid();\n            control._state.mount = true;\n        }\n        if (control._state.watch) {\n            control._state.watch = false;\n            control._subjects.state.next({ ...control._formState });\n        }\n        control._removeUnmounted();\n    });\n    _formControl.current.formState = getProxyFormState(formState, control);\n    return _formControl.current;\n}\n\nexport { Controller, Form, FormProvider, appendErrors, get, set, useController, useFieldArray, useForm, useFormContext, useFormState, useWatch };\n//# sourceMappingURL=index.esm.mjs.map\n","import React from 'react';\nimport Layout from \"../components/layout\"\nimport styled from \"styled-components\"\nimport { useForm } from 'react-hook-form';\n\nconst Contact = styled.div`\ndisplay: flex;\njustify-content: center;\n`\n\nconst FieldSet = styled.fieldset`\nborder: 0px;\nwitdh: 100px\n`\n\nconst Input = styled.input`\npadding: 3px;\nfont-size: 14px;\nfont-weight: 600;\n@media (min-width: 600px){\n    width: 500px;\n}\nwidth: 300px;\n`\n\nconst TextField = styled.textarea`\n@media (min-width: 600px){\n    width: 500px;\n}\nwidth: 300px;\n`\n\nconst FormLabel = styled.label`\ncolor: darkblue;\nfont-weight: bold;\ndisplay: block;\n`\n\nconst Button = styled.button`\npadding: 2px 10px;\ncolor: white;\nbackground-color: darkblue;\nborder-radius: 10%;\nborder: none;\n`\n\nconst ClearButton = styled.input`\npadding: 2px 10px;\ncolor: white;\nbackground-color: darkred;\nborder-radius: 10%;\nborder: none;\n`\n\n\nconst onSubmit = (data) => { console.log(data) }\n\nconst Contact_FN = () => {\n    const { register,\n        handleSubmit,\n    } = useForm();\n    const showForm = (\n        <Contact>\n            <form method=\"post\" action=\"https://getform.io/f/2d5919bc-f47f-4eaa-813b-babfa8383248\" onSubmit={handleSubmit(onSubmit)}>\n                <FieldSet>\n                    <p>\n                        <FormLabel>\n                            Name\n                        </FormLabel>\n                        <Input type=\"text\" name=\"name\" id=\"name\" placeholder=\"enter your name\" {...register('name', {\n                            required: true,\n                        })} />\n                    </p>\n                    <p>\n                        <FormLabel>\n                            Email\n                        </FormLabel>\n                        <Input type=\"email\" name=\"email\" id=\"email\" placeholder=\"your@email.address\" {...register('email', {\n                            required: true,\n                            pattern:\n                                // From https://emailregex.com/index.html\n                                /^(([^<>()\\[\\]\\\\.,;:\\s@\"]+(\\.[^<>()\\[\\]\\\\.,;:\\s@\"]+)*)|(\".+\"))@((\\[[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}])|(([a-zA-Z\\-0-9]+\\.)+[a-zA-Z]{2,}))$/\n                        })} />\n                    </p>\n                    <p>\n                        <FormLabel>\n                            Subject\n                        </FormLabel>\n                        <Input type=\"text\" name=\"subject\" id=\"subject\" placeholder=\"subject\" {...register('subject', {\n                            required: true,\n                        })} />\n                    </p>\n                    <p>\n                        <FormLabel>\n                            Message\n                        </FormLabel>\n                        <TextField name=\"message\" id=\"message\" rows=\"6\" placeholder=\"your message\" {...register('message', {\n                            required: true,\n                        })} />\n                    </p>\n                    <Button type=\"submit\">Send</Button>\n                    <ClearButton type=\"reset\" value=\"Clear\" />\n                </FieldSet>\n            </form>\n        </Contact >\n    )\n    return (<Layout>\n        {showForm}\n    </Layout>)\n}\n\nexport default Contact_FN\n"],"names":["isCheckBoxInput","element","type","isDateObject","value","Date","isNullOrUndefined","isObjectType","isObject","Array","isArray","getEventValue","event","target","checked","isNameInFieldArray","names","name","has","substring","search","getNodeParentName","isPlainObject","tempObject","prototypeCopy","constructor","prototype","hasOwnProperty","isWeb","window","HTMLElement","document","cloneObject","data","copy","Set","Blob","FileList","key","compact","filter","Boolean","isUndefined","val","undefined","get","obj","path","defaultValue","result","split","reduce","EVENTS","BLUR","FOCUS_OUT","CHANGE","VALIDATION_MODE","onBlur","onChange","onSubmit","onTouched","all","INPUT_VALIDATION_RULES","getProxyFormState","formState","control","localProxyFormState","isRoot","defaultValues","_defaultValues","Object","defineProperty","_key","_proxyFormState","isEmptyObject","keys","length","shouldRenderFormState","formStateData","updateFormState","find","convertToArrayPayload","useSubscribe","props","_props","current","subscription","disabled","subject","subscribe","next","unsubscribe","isString","generateWatchOutput","_names","formValues","isGlobal","watch","add","map","fieldName","watchAll","isKey","test","stringToPath","input","replace","set","object","index","tempPath","lastIndex","newValue","objValue","isNaN","appendErrors","validateAllFieldCriteria","errors","message","types","focusFieldBy","fields","callback","fieldsNames","field","_f","currentField","ref","focus","refs","getValidationModes","mode","isOnSubmit","isOnBlur","isOnChange","isOnAll","isOnTouch","isWatched","isBlurEvent","some","watchName","startsWith","slice","updateFieldArrayRootError","error","fieldArrayErrors","isBoolean","isFileInput","isFunction","isHTMLElement","owner","ownerDocument","defaultView","isMessage","isRadioInput","isRegex","RegExp","defaultResult","isValid","validResult","getCheckboxValue","options","values","option","attributes","defaultReturn","getRadioValue","previous","getValidateError","every","getValueAndMessage","validationData","validateField","async","shouldUseNativeValidation","isFieldArray","required","maxLength","minLength","min","max","pattern","validate","valueAsNumber","mount","inputValue","inputRef","setCustomValidity","reportValidity","isRadio","isCheckBox","isRadioOrCheckbox","isEmpty","appendErrorsCurry","bind","getMinMaxMessage","exceedMax","maxLengthMessage","minLengthMessage","maxType","minType","exceedMin","maxOutput","minOutput","valueDate","valueAsDate","convertTimeToDate","time","toDateString","isTime","isWeek","valueNumber","maxLengthOutput","minLengthOutput","patternValue","match","validateError","validationResult","unset","paths","childObject","updatePath","baseGet","isEmptyArray","createSubject","_observers","observers","observer","push","o","isPrimitive","deepEqual","object1","object2","getTime","keys1","keys2","val1","includes","val2","isMultipleSelect","live","isConnected","objectHasFunction","markFieldsDirty","isParentNodeArray","getDirtyFieldsFromDefaultValues","dirtyFieldsFromValues","getDirtyFields","getFieldValueAs","setValueAs","NaN","getFieldValue","files","selectedOptions","getResolverOptions","_fields","criteriaMode","getRuleValue","rule","source","hasValidation","schemaErrorLookup","join","foundError","pop","skipValidation","isTouched","isSubmitted","reValidateMode","unsetEmptyArray","defaultOptions","shouldFocusError","createFormControl","flushRootRender","delayErrorCallback","_options","_formState","submitCount","isDirty","isLoading","isValidating","isSubmitting","isSubmitSuccessful","touchedFields","dirtyFields","_formValues","shouldUnregister","_state","action","unMount","array","timer","_subjects","state","shouldCaptureDirtyFields","resetOptions","keepDirtyValues","validationModeBeforeSubmit","validationModeAfterSubmit","shouldDisplayAllAssociatedErrors","_updateValid","shouldUpdateValid","resolver","_executeSchema","executeBuiltInValidation","_updateIsValidating","updateValidAndValue","shouldSkipSetValueAs","defaultChecked","setFieldValue","updateTouchAndDirty","fieldValue","shouldDirty","shouldRender","shouldUpdateField","isPreviousDirty","output","_getDirty","isCurrentFieldPristine","isPreviousFieldTouched","shouldRenderByError","fieldState","previousFieldError","delayError","updateErrors","wait","clearTimeout","setTimeout","updatedFormState","context","shouldOnlyCheckValid","valid","isFieldArrayRoot","fieldError","getValues","_getWatch","fieldReference","forEach","optionRef","selected","checkboxRef","radioRef","shouldTouch","shouldValidate","trigger","setValues","fieldKey","setValue","cloneValue","isFieldValueUpdated","shouldSkipValidation","deps","watched","previousErrorLookupResult","errorLookupResult","fieldNames","executeSchemaAndUpdateState","Promise","shouldFocus","getFieldState","invalid","setError","unregister","delete","keepValue","keepError","keepDirty","keepTouched","keepDefaultValue","keepIsValid","register","disabledIsDefined","progressive","fieldRef","querySelectorAll","radioOrCheckbox","_focusError","handleSubmit","onValid","onInvalid","e","preventDefault","persist","fieldValues","_reset","keepStateOptions","updatedValues","cloneUpdatedValues","keepDefaultValues","keepValues","form","closest","reset","keepSubmitCount","keepIsSubmitted","keepErrors","_removeUnmounted","_updateFieldArray","method","args","shouldSetValues","shouldUpdateFieldsAndState","argA","argB","_getFieldArray","_resetDefaultValues","then","_updateFormState","payload","resetField","clearErrors","inputName","setFocus","shouldSelect","select","Contact","styled","div","withConfig","displayName","componentId","FieldSet","fieldset","Input","TextField","textarea","FormLabel","label","Button","button","ClearButton","console","log","Contact_FN","_formControl","_values","useForm","showForm","React","assign","id","placeholder","rows","Layout"],"sourceRoot":""}